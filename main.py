# Imports
import re
from fastapi import FastAPI, Request, File, UploadFile, Form
from fastapi.responses import JSONResponse
import joblib
import hashlib
import requests
import json
import uuid
import redis
import time
import os
import uvicorn
import binascii
import pandas as pd
import numpy as np
import tensorflow_decision_forests as tfdf
import tensorflow as tf

tf.config.run_functions_eagerly(True)


# Initalize vars
if(os.environ.get('redischannel') == None):
    channel_name = "GoFlex-Proxy-Event-Bus"

if(os.environ.get('redishost') == None):
    redis_host = '34.125.1.205'

if(os.environ.get('redisport') == None):
    redis_port = 65500

model = joblib.load('hashDetector.pkl')
df = pd.DataFrame()

redis_key = 'Malware Detection'

# Connections

# Redis client connection
redis_client = redis.StrictRedis(host=redis_host, port=redis_port, db=0)

# VirusTotal connection
#VIRUS_TOTAL_API_URL = 'https://www.virustotal.com/vtapi/v2/file/report'
#VIRUS_TOTAL_API_KEY = '7159b82996f4bea611ceb515a985e2b11a1415cb0998bc86dc25ca0e9b0f08e4'

# Functions

# File hashing function
def hashFile(file_content):
    sha256_hash = hashlib.sha256()
    sha256_hash.update(file_content)
    sha256_digest = sha256_hash.hexdigest()
    return sha256_digest

# VirusTotal scan function
def vtScan(hashcode):
    params = {'apikey': VIRUS_TOTAL_API_KEY, 'resource': hashcode}
    response = requests.get(VIRUS_TOTAL_API_URL, params=params)
    result = response.json()
    return result

# Extract hex signature function
def hexSign(file_name, len=4):
    with open(file_name, 'rb') as f:
        sign = f.read(len)
    return binascii.hexlify(sign).upper()

# Redis listener function
def watchRedis(key):
    val = redis_client.get(key)
    if val is not None:
        out = val.decode('utf-8')
    else:
        out = None
    
    return out


# API
app = FastAPI()

@app.get("/")
def root():
    return "Hello from malware analyser"

@app.post("/predict/")
async def analyze(request: Request, file: UploadFile = File(...), description: str = Form(...)):
    status = watchRedis(redis_key)
    req_id = request.headers.get('x-request-id')
    method = request.method
    file_contents = await file.read()
    file_name = file.filename
    content_type = file.content_type
    file_size = len(file_contents)
    print(f"file_name: {file_name}")
    print(f"active_status: {status}")

    file_types = [
        "application/java-archive",
        "application/EDI-X12",
        "application/EDIFACT",
        "application/javascript",
        "application/octet-stream",
        "application/ogg",
        "application/pdf",
        "application/xhtml+xml",
        "application/x-shockwave-flash",
        "application/json",
        "application/ld+json",
        "application/xml",
        "application/zip",
        "application/x-www-form-urlencoded",
        "audio/mpeg",
        "audio/x-ms-wma",
        "audio/vnd.rn-realaudio",
        "audio/x-wav",
        "image/gif",
        "image/jpeg",
        "image/png",
        "image/tiff",
        "image/vnd.microsoft.icon",
        "image/x-icon",
        "image/vnd.djvu",
        "image/svg+xml",
        "multipart/mixed",
        "multipart/alternative",
        "multipart/related",
        "multipart/form-data",
        "video/mpeg",
        "video/mp4",
        "video/quicktime",
        "video/x-ms-wmv",
        "video/x-msvideo",
        "video/x-flv",
        "video/webm",
        "application/vnd.android.package-archive",
        "application/vnd.oasis.opendocument.text",
        "application/vnd.oasis.opendocument.spreadsheet",
        "application/vnd.oasis.opendocument.presentation",
        "application/vnd.oasis.opendocument.graphics",
        "application/vnd.ms-excel",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        "application/vnd.ms-powerpoint",
        "application/vnd.openxmlformats-officedocument.presentationml.presentation",
        "application/msword",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "application/vnd.mozilla.xul+xml"
    ]

    hex_list = [
        b'2321',
        b'D4C3B2A1',
        b'A1B2C3D4',
        b'4D3CB2A1',
        b'A1B23C4D',
        b'0A0D0D0A',
        b'EDABEEDB',
        b'53503031',
        b'4D5A',
        b'5A4D',
        b'7F454C46',
        b'CAFEBABE',
        b'6B6F6C79',
        b'4D534346',
        b'0061736D',
        b'72656766',
        b'7B227061'
    ]


    if (status is not None) and (status == 'true'):

        is_file = False

        try:
            if (content_type in file_types):
                is_file = True

            if is_file == True:
                # Generatae request-id
                if req_id is None: 
                    req_id = str(uuid.uuid4().hex)


                # Generate Hash
                hash_code = hashFile(file_contents)
                dataframe = {
                    # "hash": "42fb5e2ec009a05ff5143227297074f1e9c6c3ebb9c914e223349672eca79ad0"d,
                    "hash": [hash_code],
                    "label": [None]
                }

                df = pd.DataFrame(dataframe)
                model_in = tfdf.keras.pd_dataframe_to_tf_dataset(df, label='label', task = tfdf.keras.Task.CLASSIFICATION)
                preds = model.predict(model_in)
                predlist = preds.tolist()

                # vtscan_res = vtScan(hash_code)
                hex_sign = hexSign(file_name)
                # print(hex_sign[:4])

                if (hex_sign in hex_list) or (hex_sign[:4] in hex_list):
                    t_stat = 1
                else:
                    t_stat = 0

                # if ("positives" in vtscan_res) and (vtscan_res["positives"] > 0):
                    # t_stat = 1
                # else:
                    # t_stat = 0
                # t_stat = 0

                if ((int(predlist[0][0]) or t_stat) == 1 ):
                    msg = {
                    "RequestID":req_id,
                    "IsRejected":True,
                    "Timestamp":str(int(time.time())),
                    "Component":"Malware Detection"
                    }
                    redis_client.publish(channel_name, json.dumps(msg))
                    return JSONResponse(content={"message": msg})
                else:
                    return JSONResponse(content={"message": 'Not likely  a malware'})

            else:
                return JSONResponse(content={"message": 'not a prefered filetype' })

        except Exception as e:
            return JSONResponse(content={'error': str(e)})
    
    else:
        return JSONResponse(content={"message":"module is out of function"})

# Main
if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=5010, reload=True, workers=2)