# Imports
import re
from fastapi import FastAPI, Request, File, UploadFile, Form
from fastapi.responses import JSONResponse
import joblib
import hashlib
import requests
import json
import uuid
import time
import os
import uvicorn
import binascii
import pandas as pd
import numpy as np
import tensorflow_decision_forests as tfdf
import tensorflow as tf
from decouple import config

# Initializations
tf.config.run_functions_eagerly(True)
model = joblib.load('hashDetector.pkl')
df = pd.DataFrame()

# Connections

# Virus Total API connetcion
VIRUS_TOTAL_API_URL = config('VIRUS_TOTAL_API_URL')
VIRUS_TOTAL_API_KEY = config('VIRUS_TOTAL_API_KEY')

# Functions

# File hashing function
def hashFile(file_content):
    sha256_hash = hashlib.sha256()
    sha256_hash.update(file_content)
    sha256_digest = sha256_hash.hexdigest()
    return sha256_digest

# VirusTotal scan function
def vtScan(hashcode):
    params = {'apikey': VIRUS_TOTAL_API_KEY, 'resource': hashcode}
    response = requests.get(VIRUS_TOTAL_API_URL, params=params)
    result = response.json()
    return result


# API
app = FastAPI()

@app.get("/")
def root():
    return "Hello from malware analyser"

@app.post("/")
async def analyze(request: Request, file: UploadFile = File(...), description: str = Form(...)):
    
    req_id = request.headers.get('x-request-id')
    method = request.method
    file_contents = await file.read()
    file_name = file.filename
    content_type = file.content_type
    file_size = len(file_contents)
    print(f"file_name: {file_name}")

    file_types = [
        "application/java-archive",
        "application/EDI-X12",
        "application/EDIFACT",
        "application/javascript",
        "application/octet-stream",
        "application/ogg",
        "application/pdf",
        "application/xhtml+xml",
        "application/x-shockwave-flash",
        "application/json",
        "application/ld+json",
        "application/xml",
        "application/zip",
        "application/x-www-form-urlencoded",
        "audio/mpeg",
        "audio/x-ms-wma",
        "audio/vnd.rn-realaudio",
        "audio/x-wav",
        "image/gif",
        "image/jpeg",
        "image/png",
        "image/tiff",
        "image/vnd.microsoft.icon",
        "image/x-icon",
        "image/vnd.djvu",
        "image/svg+xml",
        "multipart/mixed",
        "multipart/alternative",
        "multipart/related",
        "multipart/form-data",
        "video/mpeg",
        "video/mp4",
        "video/quicktime",
        "video/x-ms-wmv",
        "video/x-msvideo",
        "video/x-flv",
        "video/webm",
        "application/vnd.android.package-archive",
        "application/vnd.oasis.opendocument.text",
        "application/vnd.oasis.opendocument.spreadsheet",
        "application/vnd.oasis.opendocument.presentation",
        "application/vnd.oasis.opendocument.graphics",
        "application/vnd.ms-excel",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        "application/vnd.ms-powerpoint",
        "application/vnd.openxmlformats-officedocument.presentationml.presentation",
        "application/msword",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "application/vnd.mozilla.xul+xml"
    ]

    hex_list = [
        b'2321',
        b'D4C3B2A1',
        b'A1B2C3D4',
        b'4D3CB2A1',
        b'A1B23C4D',
        b'0A0D0D0A',
        b'EDABEEDB',
        b'53503031',
        b'4D5A',
        b'5A4D',
        b'7F454C46',
        b'CAFEBABE',
        b'6B6F6C79',
        b'4D534346',
        b'0061736D',
        b'72656766',
        b'7B227061'
    ]


    is_file = False

    try:
        if (content_type in file_types):
            is_file = True

        if is_file == True:
            # Generatae request-id
            if req_id is None: 
                req_id = str(uuid.uuid4().hex)


            # Generate Hash
            hash_code = hashFile(file_contents)
            dataframe = {
                "hash": [hash_code],
                "label": [None]
            }

            # Applying ML Model
            df = pd.DataFrame(dataframe)
            model_in = tfdf.keras.pd_dataframe_to_tf_dataset(df, label='label', task = tfdf.keras.Task.CLASSIFICATION)
            preds = model.predict(model_in)
            predlist = preds.tolist()

            # Applying rule based methods
            vtscan_res = vtScan(hash_code)
            hex_sign = binascii.hexlify(file_contents).upper()
            print('Magic Number:', hex_sign[:4])
            print('File Hash:', hash_code)

            if (hex_sign[:8] in hex_list) or (hex_sign[:4] in hex_list):
                hx_stat = 1
            else:
                hx_stat = 0

            if ("positives" in vtscan_res) and (vtscan_res["positives"] > 0):
                vt_stat = 1
            else:
                vt_stat = 0

            if ((int(predlist[0][0]) or vt_stat or hx_stat) == 1 ):
                return JSONResponse(content={"message": 'Potentially a Malware'})
            else:
                return JSONResponse(content={"message": 'Not likely  a Malware'})

        else:
            return JSONResponse(content={"message": 'Not a prefered filetype' })

    except Exception as e:
        return JSONResponse(content={'error': str(e)})

# Main
if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=5010, reload=True, workers=2)